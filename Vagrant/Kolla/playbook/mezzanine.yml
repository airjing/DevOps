---
- name: Deploy mezzanine
  hosts: web1
  vars:
    user: "{{ ansible_user }}"
    proj_app: mezzanine_example
    proj_name: "{{ proj_app }}"
    venv_home: "{{ ansible_env.HOME}}/.virtualenvs"
    venv_path: "{{ venv_home}}/{{ proj_name}}"
    proj_path: "{{ ansible_env.HOME}}/mezzanine/{{ proj_name }}"
    settings_path: "{{ proj_path}}/{{ proj_name}}"
    reqs_path: requirements.txt
    manage: "{{ python }}/{{ proj_path}}/manage.py"
    live_hostname: web1.azure.io
  repo_url: git@github.com:ansiblebook/mezzanine_example.git
  locale: en_US.UTF-8
  conf_path: /etc/nginx/conf
  tls_enabled: True
  python: "{{ venv_path }}/bin/python"
  db_name: "{{ proj_name }}"
  db_user: "{{ proj_name }}"
  db_pass: "{{ proj_name }}"
  db_host: localhost
  db_port: 5432
  gunicorn_procname: gunicorn_mezzanine
  num_workers: "multiprocessing.cpu_count() * 2 + 1"
  vars_files: 
    - secrets.yml
  tasks:
  - name: install apt packages
    apt: pkg= {{ item }} update_cache=yes cache_valid_time=3600
    become: True
    with_items: 
    - git
    - libjpeg-dev
    - libpq-dev
    - memcached
    - nginx
    - postgresql
    - python-dev
    - python-pip
    - python-psycopg2
    - python-setuptools
    - python-virtualenv
    - supervisor
  - name: check out the repositor on the host 
    git: repo={{ repo_url }} dest={{ proj_path }} accept_hostkey=yes

  - name: install python requirements globally via pip
    pip: name={{ item }} state=latest
    with_items:
    - pip
    - virtualenv
    - virtualenvwrapper
    become: True

  - name: install requirements.txt
    pip: requirements={{ proj_path }}/{{ reqs_path }} virtualenv={{ venv_path }}

  - name: install required python packages
    pip: name={{ item }} virtualenv={{ venv_path }}
    with_items:
    - gunicorn
    - setproctitle
    - psycopg2
    - django-compressor
    - python-memcached

  - name: copy requirements.txt file
    copy: src=files/requirements.txt dest=~/requirements.txt

  - name: install packages
    pip: requirements=~/requirements.txt virtualenv={{ venv_path }}

  - name: python packages
    pip: name={{ item.name }} version={{ item.version }} virtualenv={{ venv_path }}
    with_items:
      - {name: mezzanine,version: 4.2.2}
      - {name: gunicorn,version: 19.6.0}
      - {name: setproctitle,version: 1.1.10}
      - {name: psycopg2,version: 2.6.2}
      - {name: django-compressor,version: 2.1}
      - {name: python-memcached,version: 1.58}

  - name: create project locale
    locale_gen: name={{ locale }}
    become: True

  - name: create a db user
    postgresql_user:
      name: "{{ db_user }}"
      password: "{{ db_pass }}"
    become: True
    become_user: postgres

  - name: create the database
    postgresql_db:
      name: "{{ db_name }}"
      owner: "{{ db_user }}"
      encoding: UTF8
      lc_ctype: "{{ locale }}"
      lc_collate: "{{ locale }}"
      template: template0
    become: True
    become_user: postgres

  - name: apply migrations to create the database, collect static content
    django_manage:
      command: "{{ item }}"
      app_path: "{{ proj_path }}"
      virtualenv: "{{ venv_path }}"
    with_items:
      - syncdb
      - collectstatic

  - name: set the site id
    script: scripts/setsite.py
    environment:
      PATH: "{{ venv_path }}/bin"
      PROJECT_DIR: "{{ proj_path }}"
      PROJECT_APP: "{{ proj_app }}"
      WEBSITE_DOMAIN: "{{ live_hostname }}"

  - name: set the admin password
    script: scripts/setadmin.py
    environment:
      PATH: "{{ vent_path }}/bin"
      PROJECT_DIR: "{{ proj_path }}"
      PROJECT_APP: "{{ proj_app }}"
      ADMIN_PASSWORD: "{{ admin_pass }}"

  - name: set the gunicorn config file
    template:
      src: templates/gunicorn.conf.py.j2
      dest: "{{ proj_path }}/gunicorn.conf.py"

  - name: set the supervisor config file
    template:
      src: templates/supervisor.conf.j2
      dest: /etc/supervisor/conf.d/mezzanine.conf
    become: True
    notify: restart supervisor

  - name: set the nginx config file
    template:
      src: templates/nginx.conf.j2
      dest: /etc/nginx/sites-available/mezzanine.conf
    notify: restart nginx
    become: True

  - name: enable the nginx config file
    file:
        src: /etc/nginx/sites-available/mezzanine.conf
        dest: /etc/nginx/sites-enabled/mezzanine.conf
        state: link
    become: True

  - name: remove the default nginx config file
    file: path=/etc/nginx/sites-enabled/default state=absent
    notify: restart nginx
    become: True

  - name: ensure config path exists
    file: path={{ conf_pah }} state=directory
    sudo: True
    when: tls_enabled
    
  - name: create tls certificates
    command: >
      openssl req -new -x509 -nodes -out {{ proj_name }}.crt -keyout {{ proj_name }}.key
      -subj 'CN={{ domains[0] }}' -days 3650
      chdir={{ conf_path }}
      creates={{ conf_pah }}/{{ proj_name }}.crt
    sudo: True
    when: tls_enabled
    notify: restart nginx

  - name: install poll twitter cron job
    cron: name="poll twitter" minute="*/5" user={{ user }} job="{{ manage }} poll_twitter"
  handlers:
    - name: restart supervisor
      supervisorctl: name=gunicorn_mezzanine state=restarted
      sudo: True
    - name: restart nginx
      service: name=nginx state=restarted
      sudo: True








