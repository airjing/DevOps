# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  config.ssh.insert_key = false
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  
  # examples by loop
  #(1..3).each do |i|
  #  config.vm.define "node-#{i}" do |node|
  #  node.vm.box = "generic/ubuntu1604"
  #  node.vm.hostname = "node-#{i}"
  #    node.vm.provider "hyperv" do |h|
  #      h.linked_clone = true
  #    end
  #  end
  #end  
  $cnsource = <<-SCRIPT
  echo starting install ansible 
  sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak
  sudo cp /home/vagrant/163-xenial.list /etc/apt/sources.list
  sudo apt -y update
  sudo apt -y upgrade
  sudo apt -y install python
  sudo cp -p /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
  SCRIPT

  config.vm.define "ansible" do |a|
    a.vm.box = "generic/ubuntu1604"
    a.vm.hostname = "ansible"
    a.vm.network "forwarded_port",guest:80,host:8080
    a.vm.network "forwarded_port",guest:443,host:8443
    a.vm.provider "hyperv" do |h|
      h.vmname = "Vagrant-Ansible"
      h.cpus = 4
      h.memory = 2048
      h.linked_clone = true
      h.enable_virtualization_extensions = true
    end
    a.vm.provision "file",source: "163-xenial.list",destination: "$HOME/163-xenial.list"
    a.vm.provision "file",source: "installansible.sh",destination: "$HOME/installansible.sh"
    a.vm.provision "file",source: "sshkey.sh",destination: "$HOME/installansible.sh"
    a.vm.provision "shell" do |s0|
      run = "always"
      s0.inline = "chmod 755 installansible.sh"
    end
    a.vm.provision "shell" do |s1|
      run = "always"
      s1.path = "installansible.sh"
    end
    a.vm.provision "shell" do |s2|
      run = "always"
      s2.inline = "chmod 755 sshkey.sh"
    end
    a.vm.provision "shell" do |s3|
      run = "runonce"
      s3.path = "sshkey.sh"
    end
    # if synced_folder mount failed on domain joined machine, manually mount it.
    # sudo mount.cifs //%hostip%/%sharename% /home/vagrant/playbook -o username=username,domain=domainname,password=passwd
    # run net share on host to get sharename
    # copy ssh pub key to ansible host
    # ssh-copy-id -i ~/.ssh/id_rsa.pub vagrant@127.0.0.1
    a.vm.synced_folder "./playbook","/home/vagrant/playbook",type:"smb",smb_password:"P@ssword",smb_username:"Administrator"    
  end
  # controller machine. once it deployed, manually add 2rd NIC.
  config.vm.define "ctrl" do |ctrl|
    ctrl.vm.box = "generic/ubuntu1604"
    ctrl.vm.hostname = "ctrl"
    ctrl.vm.provider "hyperv" do |h|
      h.vmname = "Vagrant-openstack-ctrl"
      h.cpus = 2
      h.memory = 2048
      h.linked_clone = true
      h.enable_virtualization_extensions = true
    end
    ctrl.vm.provision "file", source: "163-xenial.list", destination: "$HOME/163-xenial.list"
    ctrl.vm.provision "shell" do |s|
      run = "always"
      s.inline = $cnsource
    end
    ctrl.vm.provision "bootstrap", type: "shell", run: "never" do |s|
      s.inline = "bootstrap"
    end
  config.vm.define "comp" do |comp|
    comp.vm.box = "generic/ubuntu1604"
    comp.vm.hostname = "web2"
  end
  end


  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end