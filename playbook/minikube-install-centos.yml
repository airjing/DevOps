---
# Ansible playbook to install minikube on centos7
# minikube will start with --vm-driver=none
# which means run within VM directly, don't rquired kvm installed.
# due to unstable connection to Google Cloud
# will inject pre-download minikube cache folder to ~/.minikube/
# 
# https://computingforgeeks.com/how-to-run-minikube-on-kvm/
- hosts: minikube
  gather_facts: false
  vars:

  remote_user: root
  tasks: 
  - name: Install sshkey
    authorized_key:
      user: vagrant
      key: "{{ lookup('file','~/.ssh/id_rsa.pub') }}"
      state: present
    become: yes

  - name: rename to k8sminikube
    hostname:
      name: k8sminikube
    become: yes

  - name: Disable firewall
    service:
      name: firewalld
      enabled: no
      state: stopped
    become: yes

  - name: Enable bridge-nf-call-iptables
    blockinfile:
      path: /etc/sysctl.conf
      insertafter: EOF
      block: |
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1
        net.ipv4.ip_forward = 1
      state: present
    become: yes

  - name: Apply Change by sysctl -p
    shell: sysctl -p
    become: yes

  - name: Disable swap
    shell: swapoff -a
    become: yes

# - name: Get the latest version number of kubernetes
#   shell: "curl https://storage.googleapis.com/kubernetes-release/release/stable.txt"      
#   register: version
# - debug: var=version.stdout

# - name: Download latest kubectl from mirror.azure.cn
#   get_url: 
#     url: "http://mirror.kaiyuanshe.cn/kubernetes/kubectl/{{ version.stdout }}/bin/linux/amd64/kubectl"
#     dest: /usr/local/bin/
#     mode: +x 
#   async: 30
#   poll: 5   
#   register: result
#   ignore_errors: True
#   become: yes
  
  - name: Backup CentOS-Base.repo
    shell: cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup
    become: yes
    ignore_errors: yes

  - name: change centos7 base repo to azure mirror
    copy: src=files/CentOS-Base.repo dest=/etc/yum.repos.d/CentOS-Base.repo      
    become: yes

  - name: Change docker-ce source to azure mirror
    shell: yum-config-manager --add-repo http://mirror.kaiyuanshe.cn/docker-ce/linux/centos/docker-ce.repo
    become: yes

  - name: Change kubernetes to aliyun mirror
    shell: | 
      cat <<EOF > /etc/yum.repos.d/kubernetes.repo
      [kubernetes]
      name=Kubernetes
      baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
      enabled=1
      gpgcheck=1
      repo_gpgcheck=1
      gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
      EOF
      setenforce 0
      yum install -y kubelet kubeadm kubectl
      systemctl enable kubelet && systemctl start kubelet
    become: true
    ignore_errors: yes
  
  - name: Install bash-completion
    yum:
      name:
        - bash-completion
      state: present
    become: yes  

  - name: Source bash completion
    lineinfile:
      path: ~/.bashrc
      insertafter: EOF
      line: source /usr/share/bash-completion/bash_completion
      state: present
      create: yes

  - name: Eanble shell autocompletion
    shell: echo 'source <(kubectl completion bash)' >>~/.bashrc

  - name: Check whether CPU support virtualization or not
    shell: grep -E 'vmx|svm' /proc/cpuinfo
    become: yes

#  - name: Set up stable repository
#    shell: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
#    become: yes

#https://computingforgeeks.com/install-kvm-centos-rhel-ubuntu-debian-sles-arch/
# comment out kvm packages
  - name: Install packages of kvm,docker...
    yum:
      name:
        - qemu-kvm
        - qemu-img
        - virt-manager
        - libvirt
        - libvirt-python
        - libvirt-client
        - libvirt-daemon-kvm
        - virt-install
        - virt-viewer
        - bridge-utils
        - yum-utils
        - device-mapper-persistent-data
        - lvm2
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - zlib-devel
        - perl-ExtUtils-MakeMaker
        - asciidoc
        - xmlto
        - openssl-devel
        - wget
        - curl-devel
        - unzip
#       - "@^Development Tools"
#       - "@^gnome-desktop-environment"
      state: present
    become: yes
    notify: 
      - reboot

# comment out golang unless build minikube from source  
#  - name: Download golang
#    get_url:
#      url: http://mirror.kaiyuanshe.cn/go/go1.12.6.linux-amd64.tar.gz
#      dest: /tmp/go1.12.6.linux-amd64.tar.gz
#      force: yes

#  - name: Install golang
#    shell: tar -C /usr/local -xzf /tmp/go1.12.6.linux-amd64.tar.gz
#    become: yes

#  - name: Set environment variable for golang
#    lineinfile:
#      path: ~/.bash.profile
#      insertafter: EOF
#      line: GOPATH=~/go
#      state: present
#      create: yes

#- name: Download latest git
#  get_url:
#    url: https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.22.0.tar.gz
#    dest: /tmp/git-2.22.0.tar.gz
#  ignore_errors: yes

#- name: Install latest git
#  shell: |      
#    tar -zxvf /tmp/git-2.22.0.tar.gz
#    cd /tmp/git-2.22.0
#    autoconf
#    ./configure
#    make -j8 install
#    rm -f /tmp/git-2.22.0.tar.gz
#    rm -rf /tmp/git-2.22.0
#  become: yes
#  ignore_errors: yes

#- name: Git Clone minikube
#  git: 
#    repo: https://github.com/kubernetes/minikube
#    dest: ~/Repos/minikube
#    clone: yes

#- name: Remove kernel 3.10
#  yum:
#    name: 
#      - kernel-tools-3.10*
#      - kernel-3.10.*
#      - kernel-tools-libs-3.10*
#    state: absent
#  become: yes
#  notify:
#    - reboot
#  ignore_errors: yes

  - name: Add user vagrant to libvirt group
    user:
      name: vagrant
      state: present
      groups: 
        - libvirt
        - docker
    become: yes    

  - name: Enable libvirtd
    service:
      name: libvirtd
      state: started
      enabled: yes
    become: yes
# Create a network configuration file for kvm. or download it from below link directly.
#https://raw.githubusercontent.com/libvirt/libvirt/master/src/network/default.xml
  # - name: Create kvm default network configuration file
  #   shell: |
  #     cat <<EOF > /tmp/kvm-network-default.xml
  #     <network>
  #       <name>default</name>
  #       <bridge name="virbr0"/>
  #       <forward/>
  #       <ip address="192.168.122.1" netmask="255.255.255.0">
  #         <dhcp>
  #           <range start="192.168.122.2" end="192.168.122.254"/>
  #         </dhcp>
  #       </ip>
  #     </network>
  #     EOF
      
  # - name: Define kvm default network
  #   shell: |
  #     virsh net-define /tmp/kvm-network-default.xml
  #     virsh net-start default
  #   become: yes
  #   ignore_errors: yes
  #   # refer to https://computingforgeeks.com/how-to-create-and-configure-bridge-networking-for-kvm-in-linux/

  - name: Enable docker
    service:
      name: docker
      state: started
      enabled: yes
    become: yes

#  - name: Download latest Minikube
#    get_url:
#      url: https://github.com/kubernetes/minikube/releases/download/v1.2.0/minikube-linux-amd64
#      dest: /tmp/minikube
#      mode: +x
#    ignore_errors: yes  

  - name: Create ~/.minikube/ folder
    file:
      path: ~/.minikube
      state: directory
  
  - name: Extrace ziped cache folder to ~/.minikube/
    unarchive:
      src: files/cache.zip
      copy: yes      
      dest: ~/.minikube/
      owner: vagrant

#https://github.com/kubernetes/minikube/releases/download/v1.2.0/docker-machine-driver-kvm2
  - name: Copy minikube binary & kvm2 driver
    shell: | 
      cp /home/vagrant/.minikube/docker-machine-driver-kvm2 dest=/usr/local/bin/docker-machine-driver-kvm2
      chmod +x /usr/local/bin/docker-machine-driver-kvm2
      cp /home/vagrant/.minikube/minikube-linux-amd64 /usr/local/bin/minikube
      chmod +x /usr/local/bin/minikube
    become: yes 

  # - name: Start Minikube
  #   shell: minikube config set vm-driver kvm2 && minikube start

  # - name: Create a Deployment
  #   shell: kubectl create deployment hello-node --image=hello-minikube-zero-install/hello-node --image-repository gcr.azk8s.cn/google_containers

  handlers:
    - name: reboot
      shell: reboot now
      become: yes
      kubectl run hello-minikube --image=k8s.gcr.io/echoserver:1.10 --port=8080 --image-repository gcr.azk8s.cn/google_containers